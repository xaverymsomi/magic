<?php

/**
 * Description of Database
 *
 * @author abdirahmanhassan
 */

namespace Libs;

use Exception;
use Modules\Error\Error;
use PDO;
use PDOException;

class Database extends PDO
{
    private string $error_ = MX17_APP_ROOT . '/controllers/Error.php';
    public $stmt;

    public function __construct()
    {
        //        issues_reporting(0);
        try {
            switch ($_ENV['DB_TYPE']) {
                case 'mysql':
                    parent::__construct($_ENV['DB_TYPE'] . ':host=' . $_ENV['DB_HOST'] . ';dbname=' . $_ENV['DB_NAME'] . ';charset=utf8', $_ENV['DB_USER'], $_ENV['DB_PASS']);
                    $this->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);
                    break;
                case 'sqlsrv':
                    parent::__construct($_ENV['DB_TYPE'] . ':Server=' . $_ENV['DB_HOST'] . ';Database=' . $_ENV['DB_NAME'], $_ENV['DB_USER'], $_ENV['DB_PASS']);
                    break;
                case 'odbc':
                    // 'odbc:Driver={ODBC Driver 17 for SQL Server};Server=154.66.224.132,1466;Database=MerchantDev;UID=sa;PWD=RahisiDev@2020;';
                    // parent::$_ENV__construct(['DB_TYPE'] . ':Driver={ODBC Driver 17 for SQL Server};Server=' $_ENV. ['DB_HOST'] . ';Database=' $_ENV. ['DB_NAME$_ENV'], ['DB_USER$_ENV'], ['DB_PASS'], array('MultipleActiveResultSets' => false));
                    parent::__construct($_ENV['DB_TYPE'] . ':Driver={ODBC Driver 17 for SQL Server};Server=' . $_ENV['DB_HOST'] . ';Database=' . $_ENV['DB_NAME'], $_ENV['DB_USER'], $_ENV['DB_PASS']);
                    break;
                default:
                    break;
            }

            $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            Log::sysLog('Exception at ' . __METHOD__);
            if ($e->getCode() == 'HYT00') {
                Log::dbErr('LOGIN TIMEOUT EXPIRED');
            } else if ($e->getCode() == '28000') {
                Log::dbErr('LOGIN FAILED');
            } else {
                Log::dbErr($e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine());
            }
            //            Log::dbErr(json_encode($e->getTrace()));

            $err = new Error("Error", "Sorry, We have encountered with an error while performing your request. Please try again.", null, "pe-7s-plug");
            $err->index();
            unset($err);
            exit;
        }
    }

    // public function prepare($query, $options = [])
    // {
    //     Log::queryLog($query, $options);
    //     $this->stmt = parent::prepare($query, $options); // TODO: Change the autogenerated stub
    //     return $this;
    // }

    public function execute($params = array())
    {
        return $this->stmt->execute($params);
    }

    /**
     * select
     * @param string $sql An SQL string
     * @param array $array Paramters to bind
     * @param constant $fetchMode A PDO Fetch mode
     * @return mixed
     */
    public function select($sql, $array = array(), $fetchMode = PDO::FETCH_ASSOC)
    {
        try {
            $sth = $this->prepare($sql);

            foreach ($array as $key => $value) {
                $sth->bindValue("$key", $value);
            }
            $sth->execute();
            $result = $sth->fetchAll($fetchMode);
            unset($sth);
            return $result;
        } catch (PDOException $e) {
            // echo $e->getTraceAsString();($e->getTrace(;
            Log::sysLog('Exception at ' . __METHOD__);
            $msg = $e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine();
            Log::dbErr(json_encode($e->getTrace()));

            Log::dbErr($msg);

            $err = new Error('Error', 'Sorry, we have encountered with an error while performing your request. Please try again.', null, 'pe-7s-server');
            $err->index();
            unset($err);
            unset($log);
            exit;
            //die("Oh no! There's an error in the query! " . $e->getMessage());
        }
    }

    /**
     * insert
     * @param string $table A name of table to insert into
     * @param array $data An associative array
     */
    public function save($table, $data, $model)
    {
        ksort($data);

        try {
            $fieldNames = [];
            $fieldValues = ':' . implode(', :', array_keys($data));
            $qry = '';
            switch ($_ENV['DB_TYPE']) {
                case 'mysql':
                    $fieldNames = $this->extract_mysql_insert_fields($data);
                    $qry = $this->write_mysql_insert_statement($table, $fieldNames, $fieldValues);
                    break;
                case 'odbc':
                case 'sqlsrv':
                    $fieldNames = $this->extract_sqlsrv_insert_fields($data);
                    $qry = $this->write_sqlsrv_insert_statement($table, $fieldNames, $fieldValues);
                    break;
                default:
                    break;
            }

            $sth = $this->prepare($qry);

            foreach ($data as $key => $value) {
                $sth->bindValue(":$key", $value);
            }

            $result = $sth->execute();
            unset($sth);

            $data['id'] = $this->lastInsertId();

            Log::queryLog('insert', $qry, $data);

            return $result;
        } catch (Exception $e) {
            //// ChromePhp::log($e->getMessage());
//            echo $e->getMessage();exit;
            Log::sysLog('Exception at ' . __METHOD__);
            Log::dbErr($e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine() . " FROM " . $model);
            Log::dbErr(json_encode($e->getTrace()));

            $err = new Error('Error', 'Sorry, we have encountered with an error while performing your request. Please try again.', null, 'pe-7s-server');
            $err->index();
            unset($err);
            exit;
        }
    }

    private function extract_mysql_insert_fields($data)
    {
        return implode('`, `', array_keys($data));
    }

    private function write_mysql_insert_statement($table, $names, $values)
    {
        return "INSERT INTO $table (`$names`) VALUES ($values)";
    }

    private function extract_sqlsrv_insert_fields($data)
    {
        return implode('], [', array_keys($data));
    }

    private function write_sqlsrv_insert_statement($table, $names, $values)
    {
        return "INSERT INTO $table ([$names]) VALUES ($values)";
    }

    /**
     * update
     * @param string $table A name of table to insert into
     * @param array $data An associative array
     * @param string $where the WHERE query part
     */
    public function update(string $table, array $data, string $where, $where_key = 'id')
    {
        ksort($data);

        try {
            $fieldDetails = '';
            switch ($_ENV['DB_TYPE']) {
                case 'mysql':
                    $fieldDetails = $this->extract_mysql_update_fields($data);
                    break;
                case 'odbc':
                case 'sqlsrv':
                    $fieldDetails = $this->extract_sqlsrv_update_fields($data);
                    break;
                default:
                    break;
            }
            $sql = "UPDATE $table SET $fieldDetails WHERE $where_key = '$where'";
//
            Log::queryLog('update', $sql, $data);

            $sth = $this->prepare($sql);

            foreach ($data as $key => $value) {
                $sth->bindValue(":$key", $value);
            }

            $result = $sth->execute();
            unset($sth);
            return $result;
        } catch (PDOException $e) {
            Log::sysLog('Exception at ' . __METHOD__);
            Log::dbErr($e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine());
            Log::dbErr(json_encode($e->getTrace()));

            $err = new Error('Error', 'Sorry, we have encountered with an error while performing your request. Please try again.', null, 'pe-7s-server');
            $err->index();
            unset($err);
            exit;
        }
    }

    private function extract_mysql_update_fields($data)
    {
        $value = '';
        foreach ($data as $key => $val) {
            $value .= "`$key`=:$key,";
        }
        return rtrim($value, ',');
    }

    private function extract_sqlsrv_update_fields($data)
    {
        $value = '';
        foreach ($data as $key => $val) {
            $value .= "[$key]=:$key,";
        }
        return rtrim($value, ',');
    }

    public function updateCustom($table, $data, $where)
    {
        ksort($data);
        $whereClause = '';

        try {
            $fieldDetails = '';
            switch ($_ENV['DB_TYPE']) {
                case 'mysql':
                    $fieldDetails = $this->extract_mysql_update_fields($data);
                    break;
                case 'odbc':
                case 'sqlsrv':
                    $fieldDetails = $this->extract_sqlsrv_update_fields($data);
                    break;
                default:
                    break;
            }

            foreach ($where as $value) {
                $whereClause .= ' ' . $value;
            }

            $sth = $this->prepare("UPDATE $table SET $fieldDetails WHERE $whereClause");

            foreach ($data as $key => $value) {
                $sth->bindValue(":$key", $value);
            }

            ////            ChromePhp::log("UPDATE " . $table . " SET " . $fieldDetails . " WHERE id = " . $where);
            ////            ChromePhp::log(":$key " . $value);
            // return $sth->execute();
            $result = $sth->execute();
            unset($sth);
            return $result;
        } catch (PDOException $e) {
            ////            ChromePhp::log($e->getMessage());
            Log::sysLog('Exception at ' . __METHOD__);
            Log::dbErr($e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine());
            Log::dbErr(json_encode($e->getTrace()));

            $err = new Error('Error', 'Sorry, we have encountered with an error while performing your request. Please try again.', null, 'pe-7s-server');
            $err->index();
            unset($err);
            exit;
            die("Oh no! Could not be updated! - " . $e->getCode());
        }
    }

    public function updateFiltered($table, $data, $where)
    {
        ksort($data);
        $whereClause = '';

        try {
            $fieldDetails = '';
            switch ($_ENV['DB_TYPE']) {
                case 'mysql':
                    $fieldDetails = $this->extract_mysql_update_fields($data);
                    break;
                case 'sqlsrv':
                    $fieldDetails = $this->extract_sqlsrv_update_fields($data);
                    break;
                default:
                    break;
            }

            foreach ($where as $key => $value) {
                $whereClause .= "$key" . " = :$key AND ";
            }
            $whereClause = trim($whereClause, ' AND ');
            $sql = "UPDATE $table SET $fieldDetails WHERE $whereClause";
            $sth = $this->prepare($sql);
            $dataObj = [];
            //            foreach ($data as $key => $value) {
            //                $sth->bindValue(":$key", $value);
            //            }
            //            foreach ($where as $key => $value) {
            //                $sth->bindValue(":$key", $value);
            //            }
            foreach ($data as $key => $value) {
                $dataObj[':' . $key] = $value;
            }
            foreach ($where as $key => $value) {
                $dataObj[':' . $key] = $value;
            }
            //            $this->ping();
            //            echo $sql;
            // return $sth->execute($dataObj);
            $result = $sth->execute($dataObj);
            unset($sth);
            return $result;
        } catch (PDOException $e) {
            ////            ChromePhp::log($e->getMessage());
            Log::sysLog('Exception at ' . __METHOD__);
            Log::dbErr($e->getMessage() . ' from ' . $e->getFile() . ' On line ' . $e->getLine());
            Log::dbErr(json_encode($e->getTrace()));

            $err = new Error('Error', 'Sorry, we have encountered with an error while performing your request. Please try again.', null, 'pe-7s-server');
            $err->index();
            unset($err);
            exit;
            die("Oh no! Could not be updated! - " . $e->getCode());
        }
    }
}
